# -*- coding: utf-8 -*-
"""data_augmentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UiKXimc1AkKG7rVFXqTbfqAIXhFsejex
"""

from google.colab import drive
drive.mount('/content/drive')

import glob
import pandas as pd
import numpy as np
import random
import os, os.path, shutil
from keras.preprocessing import image
from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
from keras.preprocessing.image import ImageDataGenerator

aug_times = 4
X = []
folder_path = '/content/drive/My Drive/ADS/project3/data/train_set/train_set/train_processed'
pathDir = os.listdir(folder_path)

random.seed(7)
aug_file = random.sample(pathDir, 225)

new_path = '/content/drive/My Drive/ADS/project3/data/train_set/train_set/train_aug'
for name in aug_file:
  old_image_path = os.path.join(folder_path, name)
  new_image_path = os.path.join(new_path, name)
  shutil.move(old_image_path, new_image_path)

#check number of file
processed_path = '/content/drive/My Drive/ADS/project3/data/train_set/train_set/train_processed/*.jpg'
new_path = '/content/drive/My Drive/ADS/project3/data/train_set/train_set/train_aug/*.jpg'
c1 = 0
c2 = 0
for _ in sorted(glob.glob(processed_path)):
  c1 += 1
for _ in sorted(glob.glob(new_path)):
  c2 += 1
print('images not augementation:', c1 )
print('images do augementation:', c2 )

# Data argumentation
aug_times = 4
X = []
ind = []
f_path = '/content/drive/My Drive/ADS/project3/data/train_set/train_set/train_aug/*.jpg'


#horizontal_flip
for filename in sorted(glob.glob(f_path)):
    img = image.load_img(filename, color_mode = "rgb", target_size=(75, 100, 3))
    data = image.img_to_array(img, dtype = int)
    samples = np.expand_dims(data, 0)    
    datagen = ImageDataGenerator(horizontal_flip=True)
    it = datagen.flow(samples, batch_size=1)
    for i in range(aug_times):
        # generate batch of images
        batch = it.next()
        # convert to unsigned integers for viewing
        x = batch[0].astype('uint8')
        list1 = x.flatten()
        str1 = ' '.join(str(e) for e in list1)
        X.append(str1)
        ind.append(int(filename[-8:-4]))
print('finish horizontal_flip') 

#brightness_range
for filename in sorted(glob.glob(f_path)):
    img = image.load_img(filename, color_mode = "rgb", target_size=(75, 100, 3))
    data = image.img_to_array(img, dtype = int)
    samples = np.expand_dims(data, 0)    
    datagen = ImageDataGenerator(brightness_range=[0.3,1.0])
    it = datagen.flow(samples, batch_size=1)
    for i in range(aug_times):
        # generate batch of images
        batch = it.next()
        # convert to unsigned integers for viewing
        x = batch[0].astype('uint8')
        list1 = x.flatten()
        str1 = ' '.join(str(e) for e in list1)
        X.append(str1)
        ind.append(int(filename[-8:-4]))
print('finish brightness_range')


#zoom_range
for filename in sorted(glob.glob(f_path)):
    img = image.load_img(filename, color_mode = "rgb", target_size=(75, 100, 3))
    data = image.img_to_array(img, dtype = int)
    samples = np.expand_dims(data, 0)    
    datagen = ImageDataGenerator(zoom_range=[0.5,1])
    it = datagen.flow(samples, batch_size=1)
    for i in range(aug_times):
        # generate batch of images
        batch = it.next()
        # convert to unsigned integers for viewing
        x = batch[0].astype('uint8')
        list1 = x.flatten()
        str1 = ' '.join(str(e) for e in list1)
        X.append(str1)
        ind.append(int(filename[-8:-4]))
print('finish zoom_range')

#remaining train data
X_ori = []
ind_ori = []
for filename in sorted(glob.glob("/content/drive/My Drive/ADS/project3/data/train_set/train_set/train_processed/*.jpg")):
  img = image.load_img(filename, color_mode = "rgb", target_size=(75, 100, 3))
  x = image.img_to_array(img, dtype=int)
  list1 = x.flatten()
  str1 = ' '.join(str(e) for e in list1)
  X_ori.append(str1)
  ind_ori.append(int(filename[-8:-4]))

#load data in dataframe
data_aug = {'Index':ind, 'pixels':X} 
df_pixels_aug = pd.DataFrame(data_aug)
#print(df_pixels_aug)

data_ori = {'Index':ind_ori, 'pixels':X_ori} 
df_pixels_ori = pd.DataFrame(data_ori)

df_pixels = pd.concat([df_pixels_aug,df_pixels_ori])

df = pd.read_csv('/content/drive/My Drive/ADS/project3/data/train_set/train_set/label_train.csv') 
df_aug_20 = df_pixels.merge(df, on = 'Index')[["emotion_idx","pixels"]]
print(df_aug_20)
df_aug_20.to_csv("/content/drive/My Drive/ADS/project3/data/train_set/train_set/dataset_rgb_aug_train_20_7200.csv")